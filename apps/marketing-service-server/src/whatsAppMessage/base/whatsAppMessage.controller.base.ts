/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WhatsAppMessageService } from "../whatsAppMessage.service";
import { WhatsAppMessageCreateInput } from "./WhatsAppMessageCreateInput";
import { WhatsAppMessage } from "./WhatsAppMessage";
import { WhatsAppMessageFindManyArgs } from "./WhatsAppMessageFindManyArgs";
import { WhatsAppMessageWhereUniqueInput } from "./WhatsAppMessageWhereUniqueInput";
import { WhatsAppMessageUpdateInput } from "./WhatsAppMessageUpdateInput";

export class WhatsAppMessageControllerBase {
  constructor(protected readonly service: WhatsAppMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WhatsAppMessage })
  async createWhatsAppMessage(
    @common.Body() data: WhatsAppMessageCreateInput
  ): Promise<WhatsAppMessage> {
    return await this.service.createWhatsAppMessage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        recipientNumber: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WhatsAppMessage] })
  @ApiNestedQuery(WhatsAppMessageFindManyArgs)
  async whatsAppMessages(
    @common.Req() request: Request
  ): Promise<WhatsAppMessage[]> {
    const args = plainToClass(WhatsAppMessageFindManyArgs, request.query);
    return this.service.whatsAppMessages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        recipientNumber: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WhatsAppMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async whatsAppMessage(
    @common.Param() params: WhatsAppMessageWhereUniqueInput
  ): Promise<WhatsAppMessage | null> {
    const result = await this.service.whatsAppMessage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        recipientNumber: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WhatsAppMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWhatsAppMessage(
    @common.Param() params: WhatsAppMessageWhereUniqueInput,
    @common.Body() data: WhatsAppMessageUpdateInput
  ): Promise<WhatsAppMessage | null> {
    try {
      return await this.service.updateWhatsAppMessage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          recipientNumber: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WhatsAppMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWhatsAppMessage(
    @common.Param() params: WhatsAppMessageWhereUniqueInput
  ): Promise<WhatsAppMessage | null> {
    try {
      return await this.service.deleteWhatsAppMessage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          recipientNumber: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/send-message-whatsapp")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendMessageWhatsApp(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendMessageWhatsApp(body);
  }

  @common.Get("/:id/send-whats-app-message")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SendWhatsAppMessage(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.SendWhatsAppMessage(body);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PushNotification as PrismaPushNotification,
} from "@prisma/client";
import { PushNotificationCreateInput } from "./PushNotificationCreateInput";

export class PushNotificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PushNotificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pushNotification.count(args);
  }

  async pushNotifications<T extends Prisma.PushNotificationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PushNotificationFindManyArgs>
  ): Promise<PrismaPushNotification[]> {
    return this.prisma.pushNotification.findMany<Prisma.PushNotificationFindManyArgs>(
      args
    );
  }
  async pushNotification<T extends Prisma.PushNotificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PushNotificationFindUniqueArgs>
  ): Promise<PrismaPushNotification | null> {
    return this.prisma.pushNotification.findUnique(args);
  }
  async createPushNotification<T extends Prisma.PushNotificationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PushNotificationCreateArgs>
  ): Promise<PrismaPushNotification> {
    return this.prisma.pushNotification.create<T>(args);
  }
  async updatePushNotification<T extends Prisma.PushNotificationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PushNotificationUpdateArgs>
  ): Promise<PrismaPushNotification> {
    return this.prisma.pushNotification.update<T>(args);
  }
  async deletePushNotification<T extends Prisma.PushNotificationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PushNotificationDeleteArgs>
  ): Promise<PrismaPushNotification> {
    return this.prisma.pushNotification.delete(args);
  }
  async SendPushNotification(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async TriggerPushNotification(
    args: PushNotificationCreateInput
  ): Promise<string> {
    throw new Error("Not implemented");
  }
}

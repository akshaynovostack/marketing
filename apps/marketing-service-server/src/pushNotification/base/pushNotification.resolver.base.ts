/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PushNotification } from "./PushNotification";
import { PushNotificationCountArgs } from "./PushNotificationCountArgs";
import { PushNotificationFindManyArgs } from "./PushNotificationFindManyArgs";
import { PushNotificationFindUniqueArgs } from "./PushNotificationFindUniqueArgs";
import { CreatePushNotificationArgs } from "./CreatePushNotificationArgs";
import { UpdatePushNotificationArgs } from "./UpdatePushNotificationArgs";
import { DeletePushNotificationArgs } from "./DeletePushNotificationArgs";
import { PushNotificationCreateInput } from "./PushNotificationCreateInput";
import { PushNotificationService } from "../pushNotification.service";
@graphql.Resolver(() => PushNotification)
export class PushNotificationResolverBase {
  constructor(protected readonly service: PushNotificationService) {}

  async _pushNotificationsMeta(
    @graphql.Args() args: PushNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PushNotification])
  async pushNotifications(
    @graphql.Args() args: PushNotificationFindManyArgs
  ): Promise<PushNotification[]> {
    return this.service.pushNotifications(args);
  }

  @graphql.Query(() => PushNotification, { nullable: true })
  async pushNotification(
    @graphql.Args() args: PushNotificationFindUniqueArgs
  ): Promise<PushNotification | null> {
    const result = await this.service.pushNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PushNotification)
  async createPushNotification(
    @graphql.Args() args: CreatePushNotificationArgs
  ): Promise<PushNotification> {
    return await this.service.createPushNotification({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PushNotification)
  async updatePushNotification(
    @graphql.Args() args: UpdatePushNotificationArgs
  ): Promise<PushNotification | null> {
    try {
      return await this.service.updatePushNotification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PushNotification)
  async deletePushNotification(
    @graphql.Args() args: DeletePushNotificationArgs
  ): Promise<PushNotification | null> {
    try {
      return await this.service.deletePushNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async SendPushNotification(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.SendPushNotification(args);
  }

  @graphql.Mutation(() => String)
  async TriggerPushNotification(
    @graphql.Args()
    args: PushNotificationCreateInput
  ): Promise<string> {
    return this.service.TriggerPushNotification(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Funnel as PrismaFunnel } from "@prisma/client";

export class FunnelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FunnelCountArgs, "select">): Promise<number> {
    return this.prisma.funnel.count(args);
  }

  async funnels<T extends Prisma.FunnelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FunnelFindManyArgs>
  ): Promise<PrismaFunnel[]> {
    return this.prisma.funnel.findMany<Prisma.FunnelFindManyArgs>(args);
  }
  async funnel<T extends Prisma.FunnelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FunnelFindUniqueArgs>
  ): Promise<PrismaFunnel | null> {
    return this.prisma.funnel.findUnique(args);
  }
  async createFunnel<T extends Prisma.FunnelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FunnelCreateArgs>
  ): Promise<PrismaFunnel> {
    return this.prisma.funnel.create<T>(args);
  }
  async updateFunnel<T extends Prisma.FunnelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FunnelUpdateArgs>
  ): Promise<PrismaFunnel> {
    return this.prisma.funnel.update<T>(args);
  }
  async deleteFunnel<T extends Prisma.FunnelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FunnelDeleteArgs>
  ): Promise<PrismaFunnel> {
    return this.prisma.funnel.delete(args);
  }
}

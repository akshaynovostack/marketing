/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Funnel } from "./Funnel";
import { FunnelCountArgs } from "./FunnelCountArgs";
import { FunnelFindManyArgs } from "./FunnelFindManyArgs";
import { FunnelFindUniqueArgs } from "./FunnelFindUniqueArgs";
import { CreateFunnelArgs } from "./CreateFunnelArgs";
import { UpdateFunnelArgs } from "./UpdateFunnelArgs";
import { DeleteFunnelArgs } from "./DeleteFunnelArgs";
import { FunnelService } from "../funnel.service";
@graphql.Resolver(() => Funnel)
export class FunnelResolverBase {
  constructor(protected readonly service: FunnelService) {}

  async _funnelsMeta(
    @graphql.Args() args: FunnelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Funnel])
  async funnels(@graphql.Args() args: FunnelFindManyArgs): Promise<Funnel[]> {
    return this.service.funnels(args);
  }

  @graphql.Query(() => Funnel, { nullable: true })
  async funnel(
    @graphql.Args() args: FunnelFindUniqueArgs
  ): Promise<Funnel | null> {
    const result = await this.service.funnel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Funnel)
  async createFunnel(@graphql.Args() args: CreateFunnelArgs): Promise<Funnel> {
    return await this.service.createFunnel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Funnel)
  async updateFunnel(
    @graphql.Args() args: UpdateFunnelArgs
  ): Promise<Funnel | null> {
    try {
      return await this.service.updateFunnel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Funnel)
  async deleteFunnel(
    @graphql.Args() args: DeleteFunnelArgs
  ): Promise<Funnel | null> {
    try {
      return await this.service.deleteFunnel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

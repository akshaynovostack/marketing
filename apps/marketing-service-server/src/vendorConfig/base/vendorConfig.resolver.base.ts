/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VendorConfig } from "./VendorConfig";
import { VendorConfigCountArgs } from "./VendorConfigCountArgs";
import { VendorConfigFindManyArgs } from "./VendorConfigFindManyArgs";
import { VendorConfigFindUniqueArgs } from "./VendorConfigFindUniqueArgs";
import { CreateVendorConfigArgs } from "./CreateVendorConfigArgs";
import { UpdateVendorConfigArgs } from "./UpdateVendorConfigArgs";
import { DeleteVendorConfigArgs } from "./DeleteVendorConfigArgs";
import { VendorConfigService } from "../vendorConfig.service";
@graphql.Resolver(() => VendorConfig)
export class VendorConfigResolverBase {
  constructor(protected readonly service: VendorConfigService) {}

  async _vendorConfigsMeta(
    @graphql.Args() args: VendorConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VendorConfig])
  async vendorConfigs(
    @graphql.Args() args: VendorConfigFindManyArgs
  ): Promise<VendorConfig[]> {
    return this.service.vendorConfigs(args);
  }

  @graphql.Query(() => VendorConfig, { nullable: true })
  async vendorConfig(
    @graphql.Args() args: VendorConfigFindUniqueArgs
  ): Promise<VendorConfig | null> {
    const result = await this.service.vendorConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VendorConfig)
  async createVendorConfig(
    @graphql.Args() args: CreateVendorConfigArgs
  ): Promise<VendorConfig> {
    return await this.service.createVendorConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VendorConfig)
  async updateVendorConfig(
    @graphql.Args() args: UpdateVendorConfigArgs
  ): Promise<VendorConfig | null> {
    try {
      return await this.service.updateVendorConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VendorConfig)
  async deleteVendorConfig(
    @graphql.Args() args: DeleteVendorConfigArgs
  ): Promise<VendorConfig | null> {
    try {
      return await this.service.deleteVendorConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}

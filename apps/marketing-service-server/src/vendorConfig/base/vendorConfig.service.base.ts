/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, VendorConfig as PrismaVendorConfig } from "@prisma/client";

export class VendorConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VendorConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vendorConfig.count(args);
  }

  async vendorConfigs<T extends Prisma.VendorConfigFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VendorConfigFindManyArgs>
  ): Promise<PrismaVendorConfig[]> {
    return this.prisma.vendorConfig.findMany<Prisma.VendorConfigFindManyArgs>(
      args
    );
  }
  async vendorConfig<T extends Prisma.VendorConfigFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VendorConfigFindUniqueArgs>
  ): Promise<PrismaVendorConfig | null> {
    return this.prisma.vendorConfig.findUnique(args);
  }
  async createVendorConfig<T extends Prisma.VendorConfigCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VendorConfigCreateArgs>
  ): Promise<PrismaVendorConfig> {
    return this.prisma.vendorConfig.create<T>(args);
  }
  async updateVendorConfig<T extends Prisma.VendorConfigUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VendorConfigUpdateArgs>
  ): Promise<PrismaVendorConfig> {
    return this.prisma.vendorConfig.update<T>(args);
  }
  async deleteVendorConfig<T extends Prisma.VendorConfigDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VendorConfigDeleteArgs>
  ): Promise<PrismaVendorConfig> {
    return this.prisma.vendorConfig.delete(args);
  }
}
